name: Build Flutter macOS (Electron-inspired approach)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-14
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd flutter_furl
          flutter pub get

      - name: Run tests
        run: |
          cd flutter_furl
          flutter test

      - name: Import Certificate (Electron CSC approach)
        env:
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # Decode certificate from base64 and save as certificate.p12
          echo "$CSC_LINK" | base64 --decode > certificate.p12
          
          # Create keychain with partition list support
          security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          
          # Import certificate with proper flags
          security import certificate.p12 \
            -k build.keychain \
            -P "$CSC_KEY_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security \
            -x
          
          # Set partition list (critical for newer macOS versions)
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s \
            -k "$MACOS_KEYCHAIN_PASSWORD" \
            build.keychain
          
          # Verify certificate is available
          echo "=== Available signing identities ==="
          security find-identity -v -p codesigning build.keychain
          
          # Clean up certificate file
          rm certificate.p12

      - name: Build Flutter macOS
        run: |
          cd flutter_furl
          flutter build macos --release
          
          # Verify the build output and architecture
          echo "Build completed. Checking app bundle..."
          ls -la build/macos/Build/Products/Release/
          echo "Checking binary architecture..."
          file build/macos/Build/Products/Release/flutter_furl.app/Contents/MacOS/flutter_furl
          lipo -info build/macos/Build/Products/Release/flutter_furl.app/Contents/MacOS/flutter_furl || true

      - name: Sign Application (Following Electron patterns)
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.app"
          
          echo "=== Deep signing all frameworks and binaries ==="
          # Sign using --deep flag like the Electron example suggests
          codesign --force \
            --deep \
            --verify \
            --verbose=4 \
            --sign "$MACOS_SIGNING_IDENTITY" \
            --timestamp \
            --options runtime \
            --entitlements flutter_furl/macos/Runner/DebugProfile.entitlements \
            "$APP_PATH"
          
          echo "=== Verification ==="
          codesign --verify --deep --verbose=4 "$APP_PATH"
          codesign --display --verbose=4 "$APP_PATH"
          
          # Check all signed components
          echo "=== Checking all signatures in bundle ==="
          codesign -dv --verbose=4 "$APP_PATH"

      - name: Create DMG
        run: |
          APP_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.app"
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg_temp
          
          # Copy the app to the temporary directory
          cp -R "$APP_PATH" dmg_temp/
          
          # Create the DMG
          hdiutil create -volname "flutter_furl" -srcfolder dmg_temp -ov -format UDZO "$DMG_PATH"
          
          # Clean up
          rm -rf dmg_temp
          
          echo "DMG created at: $DMG_PATH"
          ls -la "$DMG_PATH"

      - name: Sign DMG
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          echo "=== Signing DMG ==="
          codesign --force \
            --verify \
            --verbose=4 \
            --sign "$MACOS_SIGNING_IDENTITY" \
            --timestamp \
            --options runtime \
            "$DMG_PATH"
          
          echo "=== Verifying DMG signature ==="
          codesign --verify --verbose=4 "$DMG_PATH"
          codesign --display --verbose=4 "$DMG_PATH"

      - name: Notarize Application (Using Electron env var names)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          echo "=== Starting notarization with notarytool ==="
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASS" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: flutter_furl-macos-dmg
          path: flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg
          retention-days: 30
