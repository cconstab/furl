name: Build Flutter macOS (Electron-inspired approach)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-14
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'

      - name: Get dependencies
        run: |
          cd flutter_furl
          flutter pub get

      - name: Generate macOS App Icons
        run: |
          cd flutter_furl
          
          echo "=== Generating macOS App Icons from SVG ==="
          
          # Install rsvg-convert for SVG to PNG conversion
          brew install librsvg
          
          # Create icon directory if it doesn't exist
          ICON_DIR="macos/Runner/Assets.xcassets/AppIcon.appiconset"
          mkdir -p "$ICON_DIR"
          
          # Generate all required icon sizes
          echo "Generating app icons..."
          
          # 16x16
          rsvg-convert assets/icons/padlock_icon.svg -w 16 -h 16 -o "$ICON_DIR/app_icon_16.png"
          
          # 32x32 (for 16@2x and 32@1x)
          rsvg-convert assets/icons/padlock_icon.svg -w 32 -h 32 -o "$ICON_DIR/app_icon_32.png"
          
          # 64x64 (for 32@2x)
          rsvg-convert assets/icons/padlock_icon.svg -w 64 -h 64 -o "$ICON_DIR/app_icon_64.png"
          
          # 128x128 (for 128@1x)
          rsvg-convert assets/icons/padlock_icon.svg -w 128 -h 128 -o "$ICON_DIR/app_icon_128.png"
          
          # 256x256 (for 128@2x and 256@1x)
          rsvg-convert assets/icons/padlock_icon.svg -w 256 -h 256 -o "$ICON_DIR/app_icon_256.png"
          
          # 512x512 (for 256@2x and 512@1x)
          rsvg-convert assets/icons/padlock_icon.svg -w 512 -h 512 -o "$ICON_DIR/app_icon_512.png"
          
          # 1024x1024 (for 512@2x)
          rsvg-convert assets/icons/padlock_icon.svg -w 1024 -h 1024 -o "$ICON_DIR/app_icon_1024.png"
          
          echo "✅ Generated macOS app icons:"
          ls -la "$ICON_DIR"/*.png
          
          # Verify the icons were created correctly
          for icon in "$ICON_DIR"/*.png; do
            if [ -f "$icon" ]; then
              echo "$(basename "$icon"): $(file "$icon")"
            fi
          done

      - name: Run tests
        run: |
          cd flutter_furl
          flutter test

      - name: Import Certificate (Electron CSC approach)
        env:
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # Decode certificate from base64 and save as certificate.p12
          echo "$CSC_LINK" | base64 --decode > certificate.p12
          
          # Create keychain with partition list support
          security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          
          # Import certificate with proper flags
          security import certificate.p12 \
            -k build.keychain \
            -P "$CSC_KEY_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security \
            -x
          
          # Set partition list (critical for newer macOS versions)
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s \
            -k "$MACOS_KEYCHAIN_PASSWORD" \
            build.keychain
          
          # Verify certificate is available
          echo "=== Available signing identities ==="
          security find-identity -v -p codesigning build.keychain
          
          # Clean up certificate file
          rm certificate.p12

      - name: Build Flutter macOS (Universal Binary)
        run: |
          cd flutter_furl
          
          echo "=== Building Universal Binary for macOS ==="
          # Build for both arm64 and x86_64 architectures
          flutter build macos --release --dart-define=FLUTTER_TARGET_PLATFORM=darwin
          
          # Verify the build output and architecture
          echo "Build completed. Checking app bundle..."
          ls -la build/macos/Build/Products/Release/
          
          echo "=== Checking binary architecture ==="
          BINARY_PATH="build/macos/Build/Products/Release/flutter_furl.app/Contents/MacOS/flutter_furl"
          
          if [ -f "$BINARY_PATH" ]; then
            echo "Binary file details:"
            file "$BINARY_PATH"
            
            echo "Architecture information:"
            lipo -info "$BINARY_PATH" || echo "Not a fat binary or lipo failed"
            
            echo "Detailed architecture breakdown:"
            lipo -detailed_info "$BINARY_PATH" || echo "Detailed info failed"
            
            # Check if it's a universal binary
            if lipo -info "$BINARY_PATH" 2>/dev/null | grep -q "arm64.*x86_64\|x86_64.*arm64"; then
              echo "✅ Universal binary detected (arm64 + x86_64)"
            else
              echo "⚠️  Not a universal binary, checking individual architectures..."
              lipo -archs "$BINARY_PATH" || echo "Could not determine architectures"
            fi
          else
            echo "❌ Binary not found at expected path: $BINARY_PATH"
            find build -name "flutter_furl" -type f || echo "No flutter_furl binary found"
          fi
          
          echo "=== Checking all frameworks for universal support ==="
          find build/macos/Build/Products/Release/flutter_furl.app/Contents/Frameworks -name "*.framework" | while read framework; do
            binary_name=$(basename "$framework" .framework)
            framework_binary="$framework/Versions/A/$binary_name"
            if [ -f "$framework_binary" ]; then
              echo "Framework: $binary_name"
              lipo -info "$framework_binary" 2>/dev/null || echo "  Single architecture or info failed"
            fi
          done

      - name: Create Universal Binary (if needed)
        run: |
          cd flutter_furl
          BINARY_PATH="build/macos/Build/Products/Release/flutter_furl.app/Contents/MacOS/flutter_furl"
          
          # Check if we already have a universal binary
          if lipo -info "$BINARY_PATH" 2>/dev/null | grep -q "arm64.*x86_64\|x86_64.*arm64"; then
            echo "✅ Already have universal binary, skipping manual creation"
          else
            echo "=== Creating Universal Binary Manually ==="
            
            # Create backup of current build
            cp -R "build/macos/Build/Products/Release/flutter_furl.app" "build/macos/Build/Products/Release/flutter_furl_backup.app"
            
            # Build for x86_64
            echo "Building for x86_64..."
            flutter build macos --release --target-platform darwin-x64
            mv "build/macos/Build/Products/Release/flutter_furl.app" "build/macos/Build/Products/Release/flutter_furl_x64.app"
            
            # Build for arm64
            echo "Building for arm64..."
            flutter build macos --release --target-platform darwin-arm64
            mv "build/macos/Build/Products/Release/flutter_furl.app" "build/macos/Build/Products/Release/flutter_furl_arm64.app"
            
            # Create universal binary
            echo "Creating universal binary..."
            cp -R "build/macos/Build/Products/Release/flutter_furl_arm64.app" "build/macos/Build/Products/Release/flutter_furl.app"
            
            # Combine the main executable
            lipo -create \
              "build/macos/Build/Products/Release/flutter_furl_x64.app/Contents/MacOS/flutter_furl" \
              "build/macos/Build/Products/Release/flutter_furl_arm64.app/Contents/MacOS/flutter_furl" \
              -output "build/macos/Build/Products/Release/flutter_furl.app/Contents/MacOS/flutter_furl"
            
            # Combine frameworks if they exist and are different architectures
            FRAMEWORKS_DIR="build/macos/Build/Products/Release/flutter_furl.app/Contents/Frameworks"
            if [ -d "$FRAMEWORKS_DIR" ]; then
              find "$FRAMEWORKS_DIR" -name "*.framework" | while read framework; do
                binary_name=$(basename "$framework" .framework)
                framework_binary="$framework/Versions/A/$binary_name"
                
                x64_framework="build/macos/Build/Products/Release/flutter_furl_x64.app/Contents/Frameworks/$binary_name.framework/Versions/A/$binary_name"
                arm64_framework="build/macos/Build/Products/Release/flutter_furl_arm64.app/Contents/Frameworks/$binary_name.framework/Versions/A/$binary_name"
                
                if [ -f "$x64_framework" ] && [ -f "$arm64_framework" ]; then
                  echo "Creating universal framework: $binary_name"
                  lipo -create "$x64_framework" "$arm64_framework" -output "$framework_binary" || echo "Failed to create universal framework: $binary_name"
                fi
              done
            fi
            
            echo "=== Verifying Universal Binary ==="
            lipo -info "$BINARY_PATH"
            file "$BINARY_PATH"
            
            # Clean up temporary builds
            rm -rf "build/macos/Build/Products/Release/flutter_furl_x64.app"
            rm -rf "build/macos/Build/Products/Release/flutter_furl_arm64.app"
            rm -rf "build/macos/Build/Products/Release/flutter_furl_backup.app"
          fi

      - name: Sign Application (Following Electron patterns)
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.app"
          
          echo "=== Deep signing all frameworks and binaries ==="
          # Sign using --deep flag like the Electron example suggests
          codesign --force \
            --deep \
            --verify \
            --verbose=4 \
            --sign "$MACOS_SIGNING_IDENTITY" \
            --timestamp \
            --options runtime \
            --entitlements flutter_furl/macos/Runner/DebugProfile.entitlements \
            "$APP_PATH"
          
          echo "=== Verification ==="
          codesign --verify --deep --verbose=4 "$APP_PATH"
          codesign --display --verbose=4 "$APP_PATH"
          
          # Check all signed components
          echo "=== Checking all signatures in bundle ==="
          codesign -dv --verbose=4 "$APP_PATH"

      - name: Create DMG
        run: |
          APP_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.app"
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          echo "=== Creating DMG with Applications folder and custom icon ==="
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg_temp
          
          # Copy the app to the temporary directory
          cp -R "$APP_PATH" dmg_temp/
          
          # Create Applications folder symlink for easy installation
          ln -s /Applications dmg_temp/Applications
          
          # Generate a DMG icon (smaller version for volume icon)
          cd flutter_furl
          rsvg-convert assets/icons/padlock_icon.svg -w 128 -h 128 -o ../dmg_temp/.VolumeIcon.icns.png
          
          # Convert PNG to ICNS for DMG volume icon
          # Create iconset directory
          mkdir -p ../dmg_temp/VolumeIcon.iconset
          
          # Generate different sizes for the iconset
          rsvg-convert assets/icons/padlock_icon.svg -w 16 -h 16 -o ../dmg_temp/VolumeIcon.iconset/icon_16x16.png
          rsvg-convert assets/icons/padlock_icon.svg -w 32 -h 32 -o ../dmg_temp/VolumeIcon.iconset/icon_16x16@2x.png
          rsvg-convert assets/icons/padlock_icon.svg -w 32 -h 32 -o ../dmg_temp/VolumeIcon.iconset/icon_32x32.png
          rsvg-convert assets/icons/padlock_icon.svg -w 64 -h 64 -o ../dmg_temp/VolumeIcon.iconset/icon_32x32@2x.png
          rsvg-convert assets/icons/padlock_icon.svg -w 128 -h 128 -o ../dmg_temp/VolumeIcon.iconset/icon_128x128.png
          rsvg-convert assets/icons/padlock_icon.svg -w 256 -h 256 -o ../dmg_temp/VolumeIcon.iconset/icon_128x128@2x.png
          rsvg-convert assets/icons/padlock_icon.svg -w 256 -h 256 -o ../dmg_temp/VolumeIcon.iconset/icon_256x256.png
          rsvg-convert assets/icons/padlock_icon.svg -w 512 -h 512 -o ../dmg_temp/VolumeIcon.iconset/icon_256x256@2x.png
          rsvg-convert assets/icons/padlock_icon.svg -w 512 -h 512 -o ../dmg_temp/VolumeIcon.iconset/icon_512x512.png
          rsvg-convert assets/icons/padlock_icon.svg -w 1024 -h 1024 -o ../dmg_temp/VolumeIcon.iconset/icon_512x512@2x.png
          
          # Create ICNS file
          iconutil -c icns ../dmg_temp/VolumeIcon.iconset -o ../dmg_temp/.VolumeIcon.icns
          
          # Clean up iconset directory
          rm -rf ../dmg_temp/VolumeIcon.iconset
          rm -f ../dmg_temp/.VolumeIcon.icns.png
          
          # Set the volume icon to be hidden (invisible in Finder)
          chflags hidden ../dmg_temp/.VolumeIcon.icns
          
          cd ..
          
          # Verify DMG contents
          echo "DMG contents:"
          ls -la dmg_temp/
          
          # Create the DMG with proper settings and custom icon
          hdiutil create -volname "flutter_furl" \
            -srcfolder dmg_temp \
            -ov \
            -format UDZO \
            -imagekey zlib-level=9 \
            "$DMG_PATH"
          
          # Clean up
          rm -rf dmg_temp
          
          echo "DMG created at: $DMG_PATH"
          ls -la "$DMG_PATH"
          
          # Test mount the DMG to verify it works
          echo "=== Testing DMG mount ==="
          MOUNT_POINT=$(hdiutil attach "$DMG_PATH" -nobrowse -mountpoint "/tmp/test_dmg_$$" | grep -o '/tmp/test_dmg_[0-9]*' | head -1)
          if [ -n "$MOUNT_POINT" ]; then
            echo "DMG mounted successfully at: $MOUNT_POINT"
            echo "Contents of mounted DMG:"
            ls -la "$MOUNT_POINT/"
            
            # Verify Applications symlink works
            if [ -L "$MOUNT_POINT/Applications" ]; then
              echo "✅ Applications symlink found"
              ls -la "$MOUNT_POINT/Applications" || echo "Applications symlink target verification failed"
            else
              echo "❌ Applications symlink missing"
            fi
            
            # Unmount
            hdiutil detach "$MOUNT_POINT" -quiet || echo "Failed to unmount test DMG"
          else
            echo "❌ Failed to mount DMG for testing"
          fi

      - name: Sign DMG
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        run: |
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          echo "=== Signing DMG ==="
          codesign --force \
            --verify \
            --verbose=4 \
            --sign "$MACOS_SIGNING_IDENTITY" \
            --timestamp \
            --options runtime \
            "$DMG_PATH"
          
          echo "=== Verifying DMG signature ==="
          codesign --verify --verbose=4 "$DMG_PATH"
          codesign --display --verbose=4 "$DMG_PATH"

      - name: Notarize Application (Using Electron env var names)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg"
          
          echo "=== Starting notarization with notarytool ==="
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASS" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: flutter_furl-macos-dmg
          path: flutter_furl/build/macos/Build/Products/Release/flutter_furl.dmg
          retention-days: 30
