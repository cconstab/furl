name: Flutter Release Build

on:
  push:
    tags:
      - 'v*'  # Changed to match main release workflow
  workflow_dispatch:
    inputs:
      build_macos:
        description: 'Build macOS app'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows app'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    if: ${{ github.event.inputs.build_macos != 'false' || startsWith(github.ref, 'refs/tags/v') }}
    
    defaults:
      run:
        working-directory: flutter_furl
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        cache: true

    - name: Enable macOS desktop support
      run: flutter config --enable-macos-desktop

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Build macOS app (release)
      run: flutter build macos --release

    - name: Code sign macOS app (release)
      env:
        MACOS_CODESIGN_CERT: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CODESIGN_CERT_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
      run: |
        # Check if signing secrets are available
        if [ -z "$MACOS_CODESIGN_CERT" ]; then
          echo "⚠️  Code signing secrets not available, skipping signing"
          exit 0
        fi
        
        echo "=== Code Signing macOS Flutter App ==="
        
        # Load certificate
        CERT_PATH=$RUNNER_TEMP/furl-codesign.p12
        echo -n "$MACOS_CODESIGN_CERT" | base64 --decode -o $CERT_PATH
        
        # Create keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate
        security import $CERT_PATH -P "$MACOS_CODESIGN_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:apple,:,codesign: -s -k "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        APP_PATH="build/macos/Build/Products/Release/flutter_furl.app"
        
        # Sign the app bundle
        /usr/bin/codesign \
          --force \
          --deep \
          -s "$MACOS_SIGNING_IDENTITY" \
          --options=runtime \
          --entitlements ../entitlements.plist \
          --timestamp \
          -v \
          "$APP_PATH"
        
        echo "✓ Code signing completed"
      shell: bash
      continue-on-error: true

    - name: Notarize macOS app
      env:
        MACOS_APPLE_ID: ${{ secrets.APPLE_ID }}
        MACOS_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MACOS_APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      run: |
        # Check if notarization secrets are available
        if [ -z "$MACOS_APPLE_ID" ]; then
          echo "⚠️  Notarization secrets not available, skipping notarization"
          exit 0
        fi
        
        echo "=== Notarizing macOS Flutter App ==="
        APP_PATH="build/macos/Build/Products/Release/flutter_furl.app"
        
        # Create a zip file for notarization
        cd build/macos/Build/Products/Release/
        zip -r flutter_furl-for-notarization.zip flutter_furl.app/
        
        # Submit for notarization
        xcrun notarytool submit flutter_furl-for-notarization.zip \
          --apple-id "$MACOS_APPLE_ID" \
          --team-id "$MACOS_TEAM_ID" \
          --password "$MACOS_APPLE_ID_PASSWORD" \
          --wait
        
        # Staple the notarization ticket
        xcrun stapler staple flutter_furl.app
        
        echo "✓ Notarization completed"
        cd ../../../../../
      shell: bash
      continue-on-error: true

    - name: Create macOS archive
      run: |
        cd build/macos/Build/Products/Release/
        zip -r flutter_furl-macos-${{ github.ref_name }}.zip flutter_furl.app/
        mv flutter_furl-macos-${{ github.ref_name }}.zip ../../../../../

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds-${{ github.ref_name }}
        path: flutter_furl/flutter_furl-macos-${{ github.ref_name }}.zip
        retention-days: 90

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: ${{ github.event.inputs.build_windows != 'false' || startsWith(github.ref, 'refs/tags/v') }}
    
    defaults:
      run:
        working-directory: flutter_furl
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        cache: true

    - name: Enable Windows desktop support
      run: flutter config --enable-windows-desktop

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Build Windows app (release)
      run: flutter build windows --release

    - name: Create Windows archive
      shell: powershell
      run: |
        $buildPath = "build\windows\x64\runner\Release"
        $zipPath = "flutter_furl-windows-${{ github.ref_name }}.zip"
        Compress-Archive -Path "$buildPath\*" -DestinationPath $zipPath -Force

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds-${{ github.ref_name }}
        path: flutter_furl/flutter_furl-windows-${{ github.ref_name }}.zip
        retention-days: 90

  add-to-release:
    name: Add Flutter Apps to Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')  # Changed condition
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "Downloaded Flutter artifacts:"
        find artifacts -type f -name "*.zip" | sort

    - name: Generate Flutter app hashes and update all-hashes.zip
      run: |
        # Create flutter-hashes directory
        mkdir -p flutter-hashes
        
        # Generate hashes for Flutter apps
        find artifacts -name "flutter_furl-*.zip" -type f | while read file; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Generating hash for $filename"
            sha256sum "$file" | cut -d' ' -f1 > "flutter-hashes/${filename%.zip}.sha256"
          fi
        done
        
        echo "Generated Flutter hashes:"
        ls -la flutter-hashes/
        
        # Download existing all-hashes.zip from the release (if it exists)
        echo "Attempting to download existing all-hashes.zip..."
        if curl -L -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
           -o release-info.json; then
          
          # Extract download URL for all-hashes.zip
          download_url=$(cat release-info.json | grep -o '"browser_download_url":"[^"]*all-hashes\.zip"' | cut -d'"' -f4)
          
          if [ -n "$download_url" ]; then
            echo "Found existing all-hashes.zip, downloading..."
            curl -L -f "$download_url" -o existing-all-hashes.zip
            
            # Extract existing hashes
            mkdir -p existing-hashes
            cd existing-hashes
            unzip -o ../existing-all-hashes.zip
            cd ..
            
            # Copy existing hashes to flutter-hashes directory
            cp existing-hashes/*.sha256 flutter-hashes/ 2>/dev/null || true
          else
            echo "No existing all-hashes.zip found in release"
          fi
        else
          echo "Could not fetch release info or release doesn't exist yet"
        fi
        
        # Create updated all-hashes.zip
        cd flutter-hashes
        zip ../updated-all-hashes.zip *.sha256
        cd ..
        
        echo "Created updated all-hashes.zip with contents:"
        unzip -l updated-all-hashes.zip

    - name: Add Flutter Apps to Existing Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        # Don't set name or body - let the main workflow handle that
        # This will add files to the existing release created by build-release.yml
        files: |
          artifacts/macos-builds-${{ github.ref_name }}/*
          artifacts/windows-builds-${{ github.ref_name }}/*
          updated-all-hashes.zip
        draft: false
        prerelease: false
        append_body: true  # Add to existing release body
        body: |
          
          ## Flutter GUI Applications
          
          ### Download Options:
          
          **🍎 macOS:**
          - `flutter_furl-macos-*.zip` - macOS application bundle (signed and notarized)
          
          **🪟 Windows:**
          - `flutter_furl-windows-*.zip` - Windows executable and dependencies
          
          ### Installation Instructions:
          
          **macOS:** Download the ZIP, extract, and run the .app bundle. May require allowing in System Preferences > Security & Privacy.
          
          **Windows:** Download the ZIP, extract to a folder, and run `flutter_furl.exe`.
