name: Build Multi-Platform Releases

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    
    # Note: ARM64 and RISC-V builds for Linux/Windows are not supported
    # due to Dart's 'dart compile exe' not supporting cross-compilation.
    # Only macOS ARM64 is supported via native M1/M2 runners.
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - only x64 due to Dart compilation limitations
          - platform: linux
            arch: x64
            os: ubuntu-latest
            dart-arch: x64
            binary-ext: ''
            
          # macOS builds - both architectures supported with native runners
          - platform: macos
            arch: x64
            os: macos-13  # Intel runner
            dart-arch: x64
            binary-ext: ''
            
          - platform: macos
            arch: arm64
            os: macos-14  # M1/M2 runner (use specific version like noports)
            dart-arch: arm64
            binary-ext: ''
            
          # Windows builds - only x64 due to Dart compilation limitations
          - platform: windows
            arch: x64
            os: windows-latest
            dart-arch: x64
            binary-ext: '.exe'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
        architecture: ${{ matrix.dart-arch }}

    - name: Install dependencies
      run: dart pub get

    - name: Run tests
      run: dart test --exclude-tags=performance --exclude-tags=e2e
      continue-on-error: true

    - name: Create build directory
      run: mkdir -p build
      shell: bash

    - name: Build executable
      run: |
        mkdir -p build/${{ matrix.platform }}-${{ matrix.arch }}
        dart compile exe bin/furl.dart -o build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
      shell: bash

    - name: Build server executable
      run: |
        dart compile exe bin/furl_server.dart -o build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
      shell: bash
      continue-on-error: true

    - name: Build at_activate executable
      run: |
        dart compile exe bin/at_activate.dart -o build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
      shell: bash
      continue-on-error: true

    # Windows Code Signing
    - name: Sign Windows executables
      if: matrix.platform == 'windows' && github.event_name != 'pull_request'
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{ secrets.WINDOWS_CERTIFICATE }}'
        password: '${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}'
        folder: 'build/${{ matrix.platform }}-${{ matrix.arch }}'
        recursive: false
        files: |
          furl${{ matrix.binary-ext }}
          furl-server${{ matrix.binary-ext }}
          at_activate${{ matrix.binary-ext }}
      continue-on-error: true

    # macOS Code Signing (based on noports successful approach)
    # Required secrets: MACOS_CERTIFICATE, MACOS_CERTIFICATE_PASSWORD, MACOS_SIGNING_IDENTITY, MACOS_KEYCHAIN_PASSWORD
    - name: Codesign (macOS only)
      if: matrix.platform == 'macos' && github.event_name != 'pull_request'
      env:
        MACOS_CODESIGN_CERT: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CODESIGN_CERT_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
      run: |
        echo "=== macOS Code Signing Debug (${{ matrix.arch }}) ==="
        echo "Platform: ${{ matrix.platform }}"
        echo "Architecture: ${{ matrix.arch }}"
        echo "Runner OS: ${{ matrix.os }}"
        
        # Load certificate
        CERT_PATH=$RUNNER_TEMP/furl-codesign.p12
        echo -n "$MACOS_CODESIGN_CERT" | base64 --decode -o $CERT_PATH
        
        # Create keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate
        security import $CERT_PATH -P "$MACOS_CODESIGN_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:apple,:,codesign: -s -k "$MACOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        echo "Available signing identities:"
        security find-identity -v -p codesigning
        
        echo "Build directory contents:"
        ls -la build/${{ matrix.platform }}-${{ matrix.arch }}/
        
        echo "Binary architecture info:"
        file build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
        file build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
        file build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
        
        # codesign all binaries
        echo "Signing binaries..."
        /usr/bin/codesign \
          --force \
          -s "$MACOS_SIGNING_IDENTITY" \
          --options=runtime \
          --entitlements ./entitlements.plist \
          --prefix "com.atsign." \
          --timestamp \
          -v \
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
          
        /usr/bin/codesign \
          --force \
          -s "$MACOS_SIGNING_IDENTITY" \
          --options=runtime \
          --entitlements ./entitlements.plist \
          --prefix "com.atsign." \
          --timestamp \
          -v \
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
          
        /usr/bin/codesign \
          --force \
          -s "$MACOS_SIGNING_IDENTITY" \
          --options=runtime \
          --entitlements ./entitlements.plist \
          --prefix "com.atsign." \
          --timestamp \
          -v \
          build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
        
        echo "Verifying signatures:"
        codesign --verify --verbose build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
        codesign --verify --verbose build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
        codesign --verify --verbose build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
      shell: bash
      continue-on-error: true

    - name: Create zip for notarization (macOS only)
      if: matrix.platform == 'macos' && github.event_name != 'pull_request'
      run: |
        # Create a zip file containing all signed binaries for notarization
        cd build/${{ matrix.platform }}-${{ matrix.arch }}
        zip -r ../furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}-signed.zip .
        cd ../..
      shell: bash
      continue-on-error: true

    - name: Notarize the build (macOS only)
      if: matrix.platform == 'macos' && github.event_name != 'pull_request'
      env:
        MACOS_APPLE_ID: ${{ secrets.APPLE_ID }}
        MACOS_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MACOS_APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      run: |
        echo "Submitting for notarization..."
        xcrun notarytool submit build/furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}-signed.zip \
          --apple-id "$MACOS_APPLE_ID" \
          --team-id "$MACOS_TEAM_ID" \
          --password "$MACOS_APPLE_ID_PASSWORD" \
          --wait
        echo "Notarization complete"
      shell: bash
      continue-on-error: true

    # Linux Code Signing (using GPG)
    - name: Setup GPG for Linux signing
      if: matrix.platform == 'linux' && github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign --armor --detach-sig build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign --armor --detach-sig build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign --armor --detach-sig build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
      shell: bash
      continue-on-error: true

    # Create checksums for all platforms
    - name: Generate checksums
      run: |
        cd build/${{ matrix.platform }}-${{ matrix.arch }}
        if [ "${{ matrix.platform }}" = "windows" ]; then
          certutil -hashfile furl${{ matrix.binary-ext }} SHA256 | grep -v "CertUtil" | grep -v "hash" > furl.sha256
          certutil -hashfile furl-server${{ matrix.binary-ext }} SHA256 | grep -v "CertUtil" | grep -v "hash" > furl-server.sha256
          certutil -hashfile at_activate${{ matrix.binary-ext }} SHA256 | grep -v "CertUtil" | grep -v "hash" > at_activate.sha256
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          shasum -a 256 furl${{ matrix.binary-ext }} | cut -d' ' -f1 > furl.sha256
          shasum -a 256 furl-server${{ matrix.binary-ext }} | cut -d' ' -f1 > furl-server.sha256
          shasum -a 256 at_activate${{ matrix.binary-ext }} | cut -d' ' -f1 > at_activate.sha256
        else
          sha256sum furl${{ matrix.binary-ext }} | cut -d' ' -f1 > furl.sha256
          sha256sum furl-server${{ matrix.binary-ext }} | cut -d' ' -f1 > furl-server.sha256
          sha256sum at_activate${{ matrix.binary-ext }} | cut -d' ' -f1 > at_activate.sha256
        fi
      shell: bash

  # Removed per-matrix zipping of hashes. All .sha256 files will be collected and zipped in the release job.

    - name: Copy web assets
      run: |
        cp -r web build/${{ matrix.platform }}-${{ matrix.arch }}/web
        cp -r wasm-crypto build/${{ matrix.platform }}-${{ matrix.arch }}/wasm-crypto
      shell: bash
      continue-on-error: true

    - name: Create release archive
      working-directory: build
      run: |
        # Create a furl directory for proper archive structure
        mkdir -p furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl
        
        # Copy files to the furl subdirectory
        cp ${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }} furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl/
        cp ${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }} furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl/
        cp ${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }} furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl/
        cp -r ${{ matrix.platform }}-${{ matrix.arch }}/web furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl/
        cp -r ${{ matrix.platform }}-${{ matrix.arch }}/wasm-crypto furl-${{ matrix.platform }}-${{ matrix.arch }}-temp/furl/
        
        # Create archive with proper directory structure
        cd furl-${{ matrix.platform }}-${{ matrix.arch }}-temp
        if [ "${{ matrix.platform }}" = "windows" ]; then
          7z a ../furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.zip furl/
        else
          tar -czf ../furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz furl/
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: furl-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}
          build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl.sha256
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server.sha256
          build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate.sha256
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl${{ matrix.binary-ext }}.sig
          build/${{ matrix.platform }}-${{ matrix.arch }}/furl-server${{ matrix.binary-ext }}.sig
          build/${{ matrix.platform }}-${{ matrix.arch }}/at_activate${{ matrix.binary-ext }}.sig
          build/${{ matrix.platform }}-${{ matrix.arch }}/web/
          build/${{ matrix.platform }}-${{ matrix.arch }}/wasm-crypto/
        retention-days: 30

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: furl-archive-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz
          build/furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.zip
        retention-days: 30

  # Docker BuildX job for ARM/RISC-V cross-compilation
  other_build:
    name: Build ARM/RISC-V via Docker BuildX
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            arch: arm
            docker-platform: linux/arm/v7
            
          - platform: linux
            arch: arm64
            docker-platform: linux/arm64
            
          - platform: linux
            arch: riscv64
            docker-platform: linux/riscv64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm,arm64,riscv64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ matrix.docker-platform }}

    - name: Build with Docker BuildX
      run: |
        mkdir -p build
        docker buildx build \
          --platform ${{ matrix.docker-platform }} \
          --file tools/multibuild/Dockerfile.package \
          --output type=tar,dest=build/furl-${{ matrix.platform }}-${{ matrix.arch }}.tar \
          .

    - name: Extract tarball
      run: |
        cd build
        tar -xf furl-${{ matrix.platform }}-${{ matrix.arch }}.tar
        ls -la

    - name: Create release archive
      run: |
        cd build
        echo "Contents of build directory:"
        ls -la
        
        # The Docker build creates furl-linux-{arch}.tar.gz files
        if [ -f furl-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz ]; then
          mv furl-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz
          echo "✅ Found and renamed furl-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz"
        else
          echo "❌ Expected file furl-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz not found"
          echo "Available files:"
          find . -name "*.tar.gz" -o -name "*.tgz" | head -10
        fi

    - name: Generate checksums
      run: |
        cd build
        if [ -f furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz ]; then
          sha256sum furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz | cut -d' ' -f1 > furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.sha256
          echo "✅ Generated checksum for furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz"
          echo "Checksum: $(cat furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.sha256)"
        else
          echo "❌ Cannot generate checksum - file furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz not found"
          echo "Available files for checksum:"
          ls -la
        fi

    - name: Verify files before upload
      run: |
        cd build
        echo "=== Verifying files before upload ==="
        echo "Expected files:"
        echo "  - furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz"
        echo "  - furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.sha256"
        echo ""
        echo "Actual files in build directory:"
        ls -la
        echo ""
        
        TAR_FILE="furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz"
        SHA_FILE="furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.sha256"
        
        if [ -f "$TAR_FILE" ]; then
          echo "✅ $TAR_FILE exists ($(du -h "$TAR_FILE" | cut -f1))"
        else
          echo "❌ $TAR_FILE missing"
        fi
        
        if [ -f "$SHA_FILE" ]; then
          echo "✅ $SHA_FILE exists"
        else
          echo "❌ $SHA_FILE missing"
        fi

    - name: Upload cross-compiled artifacts
      uses: actions/upload-artifact@v4
      with:
        name: furl-cross-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz
          build/furl-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}.sha256
        retention-days: 30
        if-no-files-found: warn

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, other_build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List available files
      run: |
        echo "Available release files:"
        find artifacts -type f -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" -o -name "*.sig" | sort
        echo "Full directory structure:"
        find artifacts -type f | head -30
        echo "Looking specifically for .sha256 files:"
        find artifacts -name "*.sha256" -type f

    - name: Prepare release files
      run: |
        # Collect all release files that exist
        mkdir -p release-files
        find artifacts -name "*.tar.gz" -exec cp {} release-files/ \; 2>/dev/null || true
        find artifacts -name "*.zip" -exec cp {} release-files/ \; 2>/dev/null || true
        find artifacts -name "*.sha256" -exec cp {} release-files/ \; 2>/dev/null || true
        find artifacts -name "*.sig" -exec cp {} release-files/ \; 2>/dev/null || true
        echo "Files prepared for release:"
        ls -la release-files/

    - name: Zip all checksums
      run: |
        echo "Searching for .sha256 files..."
        find artifacts -name "*.sha256" -type f
        echo "Creating all-hashes directory and copying files..."
        mkdir -p all-hashes
        find artifacts -name "*.sha256" -exec cp {} all-hashes/ \; 2>/dev/null || true
        echo "Contents of all-hashes directory:"
        ls -la all-hashes/
        if [ -n "$(ls -A all-hashes)" ]; then
          cd all-hashes
          zip ../all-hashes.zip *.sha256
          cd ..
          echo "Created all-hashes.zip successfully"
          ls -la all-hashes.zip
        else
          echo "No .sha256 files found to zip!"
          exit 1
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Furl ${{ github.ref_name }}

          Secure file sharing with multi-layer encryption and client-side decryption.

          ### Downloads

          ## 🖥️ Command Line Tools

          **Linux:**
          - x64: `furl-linux-x64-${{ github.ref_name }}.tar.gz`
          - ARM64: `furl-linux-arm64-${{ github.ref_name }}.tar.gz` (Cross-compiled via Docker BuildX)
          - ARM v7: `furl-linux-arm-${{ github.ref_name }}.tar.gz` (Cross-compiled via Docker BuildX)
          - RISC-V 64: `furl-linux-riscv64-${{ github.ref_name }}.tar.gz` (Cross-compiled via Docker BuildX)

          **macOS:**
          - x64 (Intel): `furl-macos-x64-${{ github.ref_name }}.tar.gz`
          - ARM64 (Apple Silicon): `furl-macos-arm64-${{ github.ref_name }}.tar.gz`

          **Windows:**
          - x64: `furl-windows-x64-${{ github.ref_name }}.zip`

          ## 📱 GUI Applications (Flutter)

          **🍎 macOS:**
          - `flutter_furl-macos-${{ github.ref_name }}.zip` - macOS application bundle (signed and notarized)

          **🪟 Windows:**
          - `flutter_furl-windows-${{ github.ref_name }}.zip` - Windows executable and dependencies

          ### Cross-Compilation Notes

          - **x64 builds**: Native compilation on dedicated runners
          - **macOS ARM64**: Native compilation on Apple Silicon runners  
          - **Linux ARM/RISC-V**: Cross-compiled using Docker BuildX + QEMU emulation

          ### Code Signing & Security

          **All binaries are digitally signed:**
          - 🍎 **macOS**: Code signed and notarized by Apple
          - 🪟 **Windows**: Authenticode signed with trusted certificate
          - 🐧 **Linux**: GPG signed with maintainer key

          **Verification:**
          - All SHA256 checksums for every binary are provided in a single zip archive: `all-hashes.zip`
          - GPG signatures available for Linux builds (`.sig` files)
          - Windows binaries can be verified via Properties → Digital Signatures
          - macOS binaries verified automatically by Gatekeeper

          ### Usage

          Extract the archive and run:
          ```bash
          ./furl "@username" file.txt 7d -m "Your message"
          ```

          For Windows:
          ```cmd
          furl.exe "@username" file.txt 7d -m "Your message"
          ```

          ### What's Included

          ## 🖥️ Command Line Tools:
          - `furl` / `furl.exe`: Main CLI application
          - `furl-server` / `furl-server.exe`: Local web server for decryption
          - `at_activate` / `at_activate.exe`: atPlatform onboarding and authentication tool
          - `web/`: Web interface for browser-based decryption
          - `wasm-crypto/`: WebAssembly crypto acceleration modules
          - `all-hashes.zip`: Contains all SHA256 checksums for every binary
          - `*.sig`: GPG signatures (Linux only)

          ## 📱 GUI Applications:
          - **macOS App Bundle**: Native .app bundle for macOS (signed and notarized)
          - **Windows App**: Native Flutter application for Windows

          ### Installation Instructions

          **🍎 macOS GUI:** Download the ZIP, extract, and run the .app bundle. May require allowing in System Preferences > Security & Privacy.

          **🪟 Windows GUI:** Download the ZIP, extract to a folder, and run `flutter_furl.exe`.

          **💻 Command Line:** Extract the appropriate archive for your platform and run the CLI tools.

        files: |
          release-files/*.tar.gz
          release-files/*.zip
          release-files/*.sig
          all-hashes.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build, other_build]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{sha}}-{{date 'YYYYMMDD-HHmmss'}}
        flavor: |
          latest=auto

    - name: Download Linux x64 artifacts  
      uses: actions/download-artifact@v4
      with:
        name: furl-linux-x64
        path: docker-build

    - name: Debug Docker metadata
      run: |
        echo "Generated tags:"
        echo "${{ steps.meta.outputs.tags }}"
        echo "Generated labels:"
        echo "${{ steps.meta.outputs.labels }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Default branch: ${{ github.event.repository.default_branch }}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
